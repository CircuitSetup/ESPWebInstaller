name: Build and Deploy Props Firmware

on:
  workflow_dispatch:

permissions:
  contents: write
  
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "Time Circuits Display"
            path: "CircuitSetup/Time-Circuits-Display"
            folder: "Software/"
          - name: "Flux Capacitor"
            path: "CircuitSetup/Flux-Capacitor"
            folder: ""
          - name: "SID"
            path: "CircuitSetup/SID"
            folder: ""
          - name: "Dash-Gauges"
            path: "CircuitSetup/Dash-Gauges"
            folder: ""
          - name: "Remote"
            path: "CircuitSetup/Remote"
            folder: ""

    steps:
      - name: Checkout Builder Repo
        uses: actions/checkout@v4

      - name: Get Latest Commit from Target Repo
        id: latest_commit
        run: |
          LATEST_COMMIT=$(curl -s "https://api.github.com/repos/${{ matrix.path }}/commits/main" | jq -r .sha)
          if [ "$LATEST_COMMIT" == "null" ]; then
            LATEST_COMMIT="no-cache"
          fi
          echo "Using commit hash: $LATEST_COMMIT"
          echo "latest_commit=$LATEST_COMMIT" >> "$GITHUB_OUTPUT"

      - name: Cache target_repo Directory
        id: cache-target-repo
        uses: actions/cache@v4
        with:
          path: target_repo
          key: ${{ runner.os }}-target-repo-${{ matrix.path }}-${{ steps.latest_commit.outputs.latest_commit }}
          restore-keys: |
            ${{ runner.os }}-target-repo-${{ matrix.path }}-

      - name: Clone Target Repo (if cache is empty)
        if: steps.cache-target-repo.outputs.cache-hit != 'true'
        run: git clone https://github.com/${{ matrix.path }} target_repo

      - name: Get Latest Release Tag
        id: latest_release
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ matrix.path }}/releases/latest" | jq -r .tag_name)
          if [ "$LATEST_TAG" == "null" ]; then
            LATEST_TAG=""
          fi
          echo "Latest release tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Extract and Normalize Firmware Version
        id: get_version
        run: |
          RAW_VERSION=$(grep -hE '#define\s+[A-Z_]*VERSION\s+"[Vv][0-9.]+"' target_repo/${{ matrix.folder }}src/*_global.h | head -n 1 | sed -E 's/.*VERSION\s+"[Vv]([0-9.]+)".*/\1/')
          if [ -z "$RAW_VERSION" ]; then
            echo "❌ Version number not found!"
            exit 1
          fi
          VERSION="v$RAW_VERSION"
          echo "Extracted normalized version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Compare Version Numbers
        id: check_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          LAST_VERSION="${{ steps.latest_release.outputs.latest_tag }}"

          if [ "$CURRENT_VERSION" == "$LAST_VERSION" ]; then
            echo "⚠️ Firmware version has not changed ($CURRENT_VERSION). Stopping job."
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          else
            echo "✅ New firmware version detected: $CURRENT_VERSION"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Set up Python
        if: steps.check_version.outputs.should_build == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        if: steps.check_version.outputs.should_build == 'true'
        run: |
          pip install platformio
          pip install esptool

      - name: Build Firmware with PlatformIO
        if: steps.check_version.outputs.should_build == 'true'
        run: |
          mkdir -p target_repo/firmware/${{ matrix.name }}
          echo "⚙️ Building default firmware..."
          pio run -d target_repo/${{ matrix.folder }}

      - name: Rename Firmware Binary
        if: steps.check_version.outputs.should_build == 'true'
        id: rename
        run: |
          BIN_PATH=$(find target_repo/${{ matrix.folder }}.pio/build/esp32dev -name firmware.bin | head -n 1)
          if [ -z "$BIN_PATH" ]; then
            echo "❌ Firmware binary not found!"
            exit 1
          fi
          # Replace spaces with underscores in matrix.name
          SAFE_NAME=$(echo "${{ matrix.name }}" | tr ' ' '_')
          NEW_NAME="${SAFE_NAME}_${{ steps.get_version.outputs.version }}.bin"
          mv "$BIN_PATH" "target_repo/firmware/${{ matrix.name }}/$NEW_NAME"
          echo "✅ Renamed firmware binary to $NEW_NAME"

      - name: Build Firmware with GTE_KEYPAD (Only for Time Circuits Display)
        if: steps.check_version.outputs.should_build == 'true' && matrix.name == 'Time Circuits Display'
        run: |
          echo "⚙️ Building firmware with GTE_KEYPAD flag..."
          pio run -d target_repo/${{ matrix.folder }} -e esp32dev --build-flags "-D GTE_KEYPAD"

      - name: Rename GTE_KEYPAD Firmware (Only for Time Circuits Display)
        if: steps.check_version.outputs.should_build == 'true' && matrix.name == 'Time Circuits Display'
        run: |
          BIN_PATH=$(find target_repo/${{ matrix.folder }}/.pio/build -name firmware.bin | head -n 1)
          if [ -z "$BIN_PATH" ]; then
            echo "❌ GTE_KEYPAD firmware binary not found!"
            exit 1
          fi
          SAFE_NAME=$(echo "${{ matrix.name }}" | tr ' ' '_')
          NEW_NAME="${SAFE_NAME}_GTE_KEYPAD_${{ steps.get_version.outputs.version }}.bin"
          mv "$BIN_PATH" "target_repo/firmware/${{ matrix.name }}/$NEW_NAME"
          echo "✅ Renamed GTE_KEYPAD firmware -> target_repo/firmware/${{ matrix.name }}/$NEW_NAME"

      - name: Create Release on Target Repo
        if: steps.check_version.outputs.should_build == 'true'
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          repository: ${{ matrix.path }}
          tag_name: "${{ steps.get_version.outputs.version }}"
          name: "${{ matrix.name }} Firmware ${{ steps.get_version.outputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            target_repo/firmware/${{ matrix.name }}/*.bin
          fail_on_unmatched_files: true


