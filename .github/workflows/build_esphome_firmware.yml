name: Build ESPHome Firmware

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!index.html'
      - '!*.md'
      - '!.github/workflows/*'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual runs
    inputs:
      force_build:
        description: 'Force build even if firmware is up to date'
        required: false
        default: 'false'
      esphome_dev:
        description: 'Use ESPHome dev version'
        required: false
        default: 'false'
      generate_json_only:
        description: 'Only generate manifest/firmware_index JSON files'
        required: false
        default: 'false'
  schedule:
    - cron: '0 6 * * 1,4'

permissions:
  contents: write

concurrency:
  group: build_esphome_firmware
  cancel-in-progress: true

jobs:
  determine-build:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.set-files.outputs.files }}
      version: ${{ steps.esphome_version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install ESPHome
        run: |
          pip3 install wheel
          if [ "${{ github.event.inputs.esphome_dev }}" == "true" ]; then
            echo "Installing ESPHome dev..."
            pip3 install git+https://github.com/esphome/esphome.git@dev
          else
            echo "Installing ESPHome..."
            pip3 install esphome
          fi

      - name: Get ESPHome version
        id: esphome_version
        run: |
          version=$(esphome version | grep 'Version:' | sed 's/Version: //')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected ESPHome version: $version"

      - name: Determine firmware needing build
        id: set-files
        run: |
          source ./scripts/configs.sh
          version="${{ steps.esphome_version.outputs.version }}"
          force_build="${{ github.event.inputs.force_build }}"
          force_build="${force_build:-false}"
          
          needs_build=()
          mkdir -p firmware
      
          if [[ "$force_build" == "true" ]]; then
            echo "Force build enabled. Adding all configs."
            needs_build=("${CONFIG_LIST[@]}")
          else
            for config in "${CONFIG_LIST[@]}"; do
              base=$(basename "$config" .yaml)
              expected="firmware/${base}-${version}.bin"
              if [[ ! -f "$expected" ]]; then
                echo "$expected does not exist, will build."
                needs_build+=("$config")
              else
                echo "$expected exists. Skipping build."
              fi
            done
          fi

          if [ ${#needs_build[@]} -eq 0 ]; then
            json="[]"
          else
            json=$(printf '%s\n' "${needs_build[@]}" | jq -R . | jq -cs .)
          fi

          echo "files=$json" >> $GITHUB_OUTPUT

  build-firmware:
    needs: determine-build
    runs-on: ubuntu-latest
    if: needs.determine-build.outputs.files != '[]' && github.event.inputs.generate_json_only != 'true'

    concurrency:
      group: build-firmware-${{ matrix.files }}
      cancel-in-progress: false

    strategy:
      matrix:
        files: ${{ fromJson(needs.determine-build.outputs.files) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download ESPHome Config File
        run: |
          source scripts/configs.sh
      
          config_file="${{ matrix.files }}"
      
          check_branch_exists() {
            repo="$1"
            branch="$2"
            http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${repo}/branches/${branch}")
            if [ "$http_status" == "200" ]; then
              echo "true"
            else
              echo "false"
            fi
          }

          if [ "${{ github.event.inputs.esphome_dev }}" == "true" ]; then
            gdo_branch="dev"
            energy_meter_branch="dev"

            if [ "$(check_branch_exists CircuitSetup/circuitsetup-esphome dev)" != "true" ]; then
              gdo_branch="master"
            fi
            if [ "$(check_branch_exists CircuitSetup/Expandable-6-Channel-ESP32-Energy-Meter dev)" != "true" ]; then
              energy_meter_branch="master"
            fi
          else
            gdo_branch="master"
            energy_meter_branch="master"
          fi

          if [[ "$config_file" == circuitsetup-gdo-* ]]; then
            url="https://raw.githubusercontent.com/CircuitSetup/circuitsetup-esphome/${gdo_branch}/${config_file}"
          else
            url="https://raw.githubusercontent.com/CircuitSetup/Expandable-6-Channel-ESP32-Energy-Meter/${energy_meter_branch}/Software/ESPHome/${config_file}"
          fi

          echo "Downloading $config_file from $url"
          curl -fSL "$url" -o "$config_file"

      - name: Build firmware
        id: build
        uses: esphome/build-action@v7
        with:
          yaml-file: ${{ matrix.files }}
          version: ${{ github.event.inputs.esphome_dev == 'true' && 'dev' || needs.determine-build.outputs.version }}

      - name: Move compiled binary
        id: firmware
        run: |
          version="${{ needs.determine-build.outputs.version }}"
          build_name="${{ steps.build.outputs.name }}"
          filename=$(basename "${{ matrix.files }}" .yaml)-${version}.bin
          mkdir -p firmware
          mv "$build_name/$build_name.factory.bin" "firmware/${filename}"
          echo "filename=$filename" >> $GITHUB_OUTPUT

      - name: Build Manifest
        run: |
          source scripts/configs.sh
          version="${{ needs.determine-build.outputs.version }}"
          filename="${{ steps.firmware.outputs.filename }}"
          config_file="${{ matrix.files }}"

          matched_entry="${CONFIG_META[$config_file]}"
          if [ -z "$matched_entry" ]; then
            echo "No manifest mapping found for $config_file. Skipping."
            exit 0
          fi

          IFS="|" read -r name mcu <<< "$matched_entry"
          manifest_name="manifest_$(basename "$config_file" .yaml)-${version}.json"

          export MANIFEST_NAME="$name"
          export MANIFEST_FNAME="$manifest_name"
          export MANIFEST_VERSION="$version"

          if [[ "$mcu" == "ESP32_S3" ]]; then
            export ESP32_S3_IMAGE_URI="https://circuitsetup.github.io/ESPWebInstaller/firmware/$filename"
          else
            export ESP32_IMAGE_URI="https://circuitsetup.github.io/ESPWebInstaller/firmware/$filename"
          fi

          mkdir -p manifests
          ruby ./scripts/update-espwebtools-manifests.rb

      - name: Commit firmware and manifest to repo
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git fetch origin main
          git checkout main
      
          git add firmware
          git add manifests
      
          if git diff --cached --quiet; then
            echo "⚠️ No changes to commit."
            exit 0
          fi
      
          git commit -m "Add firmware and manifest for ${{ matrix.files }}"
      
          attempts=0
          max_attempts=5
      
          until git pull --rebase origin main && git push origin HEAD:main; do
            attempts=$((attempts+1))
            if [ $attempts -ge $max_attempts ]; then
              echo "❌ Max push attempts reached, exiting with failure."
              exit 1
            fi
            echo "⚠️ Push failed due to remote update. Retrying in 10 seconds... (attempt $attempts of $max_attempts)"
            sleep 10
          done

  generate-index:
    runs-on: ubuntu-latest
    needs: [determine-build, build-firmware]
    if: github.event.inputs.generate_json_only == 'true' || needs.determine-build.outputs.files != '[]'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Make generate-missing-manifests.sh executable
        run: chmod +x scripts/generate-missing-manifests.sh

      - name: Generate any missing manifests
        run: ./scripts/generate-missing-manifests.sh

      - name: Generate firmware index
        run: |
          mkdir -p manifests

          declare -A product_names
          declare -A product_versions

          for manifest in manifests/manifest_*.json; do
            manifest_file=$(basename "$manifest")
            if [[ "$manifest_file" =~ ^manifest_(.+)-([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?)\.json$ ]]; then
              productId="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
            else
              echo "Skipping $manifest_file — invalid filename pattern"
              continue
            fi

            name=$(jq -r '.name' "$manifest")
            if [ "$name" = "null" ]; then
              echo "Skipping $manifest_file — missing .name field"
              continue
            fi

            product_names["$productId"]="$name"
            product_versions["$productId"]+="$version "
          done

          echo "[" > manifests/firmware_index.json
          first=true

          for productId in "${!product_versions[@]}"; do
            name="${product_names[$productId]}"
            versions="${product_versions[$productId]}"
            IFS=' ' read -r -a version_array <<< "$versions"
            sorted_versions=$(printf "%s\n" "${version_array[@]}" | sort -Vr)
            limited_versions=$(echo "$sorted_versions" | head -n 5)


            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> manifests/firmware_index.json
            fi

            echo "  {" >> manifests/firmware_index.json
            echo "    \"productId\": \"$productId\"," >> manifests/firmware_index.json
            echo "    \"name\": \"$name\"," >> manifests/firmware_index.json
            echo "    \"versions\": [" >> manifests/firmware_index.json

            vfirst=true
            while IFS= read -r v; do
              if [ "$vfirst" = true ]; then
                vfirst=false
              else
                echo "," >> manifests/firmware_index.json
              fi
              echo "      { \"version\": \"$v\" }" >> manifests/firmware_index.json
            done <<< "$limited_versions"

            echo "    ]" >> manifests/firmware_index.json
            echo "  }" >> manifests/firmware_index.json
          done

          echo "]" >> manifests/firmware_index.json

      - name: Commit firmware index to repo
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git pull origin main
          git add manifests/firmware_index.json

          if git diff --cached --quiet; then
            echo "⚠️ No changes to commit."
          else
            git commit -m "Update firmware index"
            git push origin HEAD:main
          fi
