name: Build ESPHome Firmware

on:
  push:
    branches:
      - main
    paths:
      - '**'
      - '!index.html'
      - '!*.md'
      - '!.github/workflows/*'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual runs
    inputs:
      force_build:
        description: 'Force build even if firmware is up to date'
        required: false
        default: 'false'
      esphome_dev:
        description: 'Use ESPHome dev version'
        required: false
        default: 'false'
      generate_json_only:
        description: 'Only generate manifest/firmware_index JSON files'
        required: false
        default: 'false'
  schedule:
    - cron: '0 6 * * 1,4'

permissions:
  contents: write

concurrency:
  group: build_esphome_firmware
  cancel-in-progress: true

jobs:
  determine-build:
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.set-files.outputs.files }}
      version: ${{ steps.esphome_version.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ESPHome
        run: |
          pip3 install wheel
          if [ "${{ github.event.inputs.esphome_dev }}" == "true" ]; then
            echo "Installing ESPHome dev..."
            pip3 install git+https://github.com/esphome/esphome.git@dev
          else
            echo "Installing ESPHome..."
            pip3 install esphome
          fi

      - name: Get ESPHome version
        id: esphome_version
        run: |
          version=$(esphome version | grep 'Version:' | sed 's/Version: //')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected ESPHome version: $version"

      - name: Determine firmware needing build
        id: set-files
        run: |
          version="${{ steps.esphome_version.outputs.version }}"
          force_build="${{ github.event.inputs.force_build }}"
          force_build="${force_build:-false}"

          configs=(
            "circuitsetup-gdo-default.yaml"
            "circuitsetup-gdo-dry-contact.yaml"
            "6chan_energy_meter_main_board.yaml"
            "6chan_energy_meter_1-addon.yaml"
            "6chan_energy_meter_2-addons.yaml"
            "6chan_energy_meter_3-addons.yaml"
            "6chan_energy_meter_main_ethernet.yaml"
            "6chan_energy_meter_1-addon_ethernet.yaml"
            "6chan_energy_meter_2-addons_ethernet.yaml"
            "6chan_energy_meter_3-addons_ethernet.yaml"
          )
          
          needs_build=()
          mkdir -p firmware
      
          if [[ "$force_build" == "true" ]]; then
            echo "Force build enabled. Adding all configs."
            needs_build=("${configs[@]}")
          else
            for config in "${configs[@]}"; do
              base=$(basename "$config" .yaml)
              expected="firmware/${base}-${version}.bin"
              if [[ ! -f "$expected" ]]; then
                echo "$expected does not exist, will build."
                needs_build+=("$config")
              else
                echo "$expected exists. Skipping build."
              fi
            done
          fi

          if [ ${#needs_build[@]} -eq 0 ]; then
            json="[]"
          else
            json=$(printf '%s\n' "${needs_build[@]}" | jq -R . | jq -cs .)
          fi
          echo "files=$json" >> $GITHUB_OUTPUT

  build-firmware:
    needs: determine-build
    runs-on: ubuntu-latest
    if: needs.determine-build.outputs.files != '[]' && github.event.inputs.generate_json_only != 'true'

    strategy:
      matrix:
        files: ${{ fromJson(needs.determine-build.outputs.files) }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ESPHome
        run: |
          pip3 install wheel
          if [ "${{ github.event.inputs.esphome_dev }}" == "true" ]; then
            echo "Installing ESPHome dev..."
            pip3 install git+https://github.com/esphome/esphome.git@dev
          else
            echo "Installing ESPHome..."
            pip3 install esphome
          fi

      - name: Download ESPHome Config Files
        run: |
          check_branch_exists() {
            repo="$1"
            branch="$2"
            http_status=$(curl -s -o /dev/null -w "%{http_code}" "https://api.github.com/repos/${repo}/branches/${branch}")
            if [ "$http_status" == "200" ]; then
              echo "true"
            else
              echo "false"
            fi
          }
          
          branch="master"
          if [ "${{ github.event.inputs.esphome_dev }}" == "true" ]; then
            echo "ESPHome dev mode requested. Checking branch availability..."
          
            gdo_repo="CircuitSetup/circuitsetup-esphome"
            energy_meter_repo="CircuitSetup/Expandable-6-Channel-ESP32-Energy-Meter"
          
            if [ "$(check_branch_exists $gdo_repo dev)" == "true" ]; then
              gdo_branch="dev"
            else
              gdo_branch="master"
              echo "Dev branch not found in $gdo_repo. Using master."
            fi
          
            if [ "$(check_branch_exists $energy_meter_repo dev)" == "true" ]; then
              energy_meter_branch="dev"
            else
              energy_meter_branch="master"
              echo "Dev branch not found in $energy_meter_repo. Using master."
            fi
          else
            gdo_branch="master"
            energy_meter_branch="master"
          fi
          
          base_gdo_repo_url="https://raw.githubusercontent.com/CircuitSetup/circuitsetup-esphome/${gdo_branch}"
          base_energy_meter_repo_url="https://raw.githubusercontent.com/CircuitSetup/Expandable-6-Channel-ESP32-Energy-Meter/${energy_meter_branch}/Software/ESPHome"
          
          declare -A config_urls
          
          config_urls["circuitsetup-gdo-default.yaml"]="${base_gdo_repo_url}/circuitsetup-gdo-default.yaml"
          config_urls["circuitsetup-gdo-dry-contact.yaml"]="${base_gdo_repo_url}/circuitsetup-gdo-dry-contact.yaml"
          
          config_urls["6chan_energy_meter_main_board.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_main_board.yaml"
          config_urls["6chan_energy_meter_1-addon.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_1-addon.yaml"
          config_urls["6chan_energy_meter_2-addons.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_2-addons.yaml"
          config_urls["6chan_energy_meter_3-addons.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_3-addons.yaml"
          config_urls["6chan_energy_meter_main_ethernet.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_main_ethernet.yaml"
          config_urls["6chan_energy_meter_1-addon_ethernet.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_1-addon_ethernet.yaml"
          config_urls["6chan_energy_meter_2-addons_ethernet.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_2-addons_ethernet.yaml"
          config_urls["6chan_energy_meter_3-addons_ethernet.yaml"]="${base_energy_meter_repo_url}/6chan_energy_meter_3-addons_ethernet.yaml"
          
          echo "Downloading ESPHome configs from branches: circuitsetup-esphome=$gdo_branch, energy_meter=$energy_meter_branch"
          
          for file in "${!config_urls[@]}"; do
            url="${config_urls[$file]}"
            echo "Downloading $file from $url"
            curl -L -o "$file" "$url"
          done

      - name: Compile ESPHome
        run: esphome -v compile "${{ matrix.files }}"

      - name: Create firmware directory
        run: mkdir -p firmware

      - name: Move the single combined file
        id: firmware
        run: |
          version="${{ needs.determine-build.outputs.version }}"
          filename=$(basename "${{ matrix.files }}" .yaml)-${version}.bin
          find .esphome/build -type f -name "firmware.factory.bin" -exec \
            mv {} "firmware/${filename}" \;
          echo "filename=$filename" >> $GITHUB_OUTPUT

      - name: Create a manifests directory
        run: mkdir -p manifests
        
      - name: Build Manifests
        run: |
          version="${{ needs.determine-build.outputs.version }}"
          filename="${{ steps.firmware.outputs.filename }}"
          config_file="${{ matrix.files }}"
      
          declare -A manifests
      
          # GDO
          manifests["circuitsetup-gdo-default.yaml"]="CircuitSetup Security+ Garage Door Opener|manifest_secplus_gdo.json|ESP32_S3"
          manifests["circuitsetup-gdo-dry-contact.yaml"]="CircuitSetup Garage Door Opener Dry Contact|manifest_gdo_dry_contact.json|ESP32_S3"
      
          # 6 Channel Meter
          manifests["6chan_energy_meter_main_board.yaml"]="CircuitSetup 6 Channel Energy Meter Main|manifest_6_channel_meter.json|ESP32"
          manifests["6chan_energy_meter_1-addon.yaml"]="CircuitSetup 6 Channel Energy Meter Main + 1 Add-on|manifest_6_channel_meter_1-addon.json|ESP32"
          manifests["6chan_energy_meter_2-addons.yaml"]="CircuitSetup 6 Channel Energy Meter Main + 2 Add-ons|manifest_6_channel_meter_2-addons.json|ESP32"
          manifests["6chan_energy_meter_3-addons.yaml"]="CircuitSetup 6 Channel Energy Meter Main + 3 Add-ons|manifest_6_channel_meter_3-addons.json|ESP32"
      
          # 6 Channel Meter Ethernet
          manifests["6chan_energy_meter_main_ethernet.yaml"]="CircuitSetup 6 Channel Energy Meter Ethernet|manifest_6_channel_meter_ethernet.json|ESP32_S3"
          manifests["6chan_energy_meter_1-addon_ethernet.yaml"]="CircuitSetup 6 Channel Energy Meter + 1 Add-on Ethernet|manifest_6_channel_meter_1-addon_ethernet.json|ESP32_S3"
          manifests["6chan_energy_meter_2-addons_ethernet.yaml"]="CircuitSetup 6 Channel Energy Meter + 2 Add-ons Ethernet|manifest_6_channel_meter_2-addons_ethernet.json|ESP32_S3"
          manifests["6chan_energy_meter_3-addons_ethernet.yaml"]="CircuitSetup 6 Channel Energy Meter + 3 Add-ons Ethernet|manifest_6_channel_meter_3-addons_ethernet.json|ESP32_S3"
      
          if [ -z "${manifests[$config_file]}" ]; then
            echo "No manifest mapping found for $config_file. Skipping."
            exit 0
          fi
      
          IFS="|" read -r MANIFEST_NAME MANIFEST_FNAME MCU <<< "${manifests[$config_file]}"
      
          echo "Building manifest for: $MANIFEST_NAME ($MANIFEST_FNAME)"
      
          export MANIFEST_NAME MANIFEST_FNAME MANIFEST_VERSION="$version"
      
          if [[ "$MCU" == "ESP32_S3" ]]; then
            export ESP32_S3_IMAGE_URI="https://circuitsetup.github.io/ESPWebInstaller/firmware/$filename"
          else
            export ESP32_IMAGE_URI="https://circuitsetup.github.io/ESPWebInstaller/firmware/$filename"
          fi
      
          ruby ./scripts/update-espwebtools-manifests.rb
          
      - name: Upload manifests
        uses: actions/upload-artifact@v4
        with:
          name: manifests
          path: manifests
          
  generate-index:
    runs-on: ubuntu-latest
    needs: [build-firmware, determine-build]  # optionally depends on these
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Download manifests from build-firmware (if any)
        uses: actions/download-artifact@v4
        with:
          name: manifests
          path: manifests
        continue-on-error: true  # fallback to checked-out version if not present
      
      - name: Generate firmware version index
        run: |
          mkdir -p manifests
          echo "[" > manifests/firmware_index.json
          
          first=true
          for manifest in manifests/manifest_*.json; do
            # Extract productId from file name (remove prefix and .json suffix)
            productId=$(basename "$manifest" | sed -E 's/^manifest_(.+)\.json$/\1/')
            
            # Get the product name from the manifest JSON
            name=$(jq -r '.name' "$manifest")
            
            # Find up to 5 recent firmware builds for this product
            files=$(ls -t firmware/${productId}-*.bin 2>/dev/null | head -n 5)
            if [ -z "$files" ]; then
              continue
            fi
          
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> manifests/firmware_index.json
            fi
          
            echo "  {" >> manifests/firmware_index.json
            echo "    \"productId\": \"$productId\"," >> manifests/firmware_index.json
            echo "    \"name\": \"$name\"," >> manifests/firmware_index.json
            echo "    \"versions\": [" >> manifests/firmware_index.json
          
            vfirst=true
            for f in $files; do
              version=$(echo "$f" | sed -E "s/firmware\/${productId}-([^.]+)\.bin/\1/")
              if [ "$vfirst" = true ]; then
                vfirst=false
              else
                echo "," >> manifests/firmware_index.json
              fi
              echo "      { \"version\": \"$version\", \"file\": \"$f\" }" >> manifests/firmware_index.json
            done
          
            echo "    ]" >> manifests/firmware_index.json
            echo "  }" >> manifests/firmware_index.json
          done
          
          echo "]" >> manifests/firmware_index.json

      - name: Commit firmware and manifests to repo
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git config pull.rebase false
          git add firmware
          git add manifests
          git commit -m "Add compiled firmware and updated manifests" || echo "No changes to commit."
  
          attempts=0
          max_attempts=5
  
          until git pull origin main --no-edit && git push origin HEAD:main; do
            attempts=$((attempts+1))
            if [ $attempts -ge $max_attempts ]; then
              echo "Max push attempts reached, exiting with failure."
              exit 1
            fi
            echo "Push failed due to remote changes, retrying in 10 seconds... (attempt $attempts of $max_attempts)"
            sleep 10
          done
